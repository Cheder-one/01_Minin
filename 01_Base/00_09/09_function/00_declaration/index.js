//// Function Declaration - обьявление функции
// Можем вызывать функцию до ее определения

// function name(param) {}

sayHello();
function sayHello () {
   console.log('Hello console!');
}
sayHello();


function sum00 (a = 1, b = 3) {
   console.log(a + b);
}
sum00();

// Or

function sum01 (a, b) {
   console.log(a + b);
}
sum01(1, 3);

// Or

function sum02 (a, b = 3) {
   console.log(a + b);
}
sum02(1);

//// Callback — это функция, в основной функции, которая должна быть выполнена после того, как другая (вторая) функция завершила выполнение (отсюда и название: callback — функция обратного вызова).
console.log('////Callback////');

function sum(a, b, callback) {
   const result = a + b;
   callback(result);
}

function displayer(resultCopy) {
   console.log('Результат:', resultCopy);
}

sum(3, 10, displayer);

/* Что тут происходит?
Создаем функцию sum03 с параметрами 'a', 'b', 'callback' 
(параметрами могут быть любые данные, даже функции, как и callback в данном случае.)
'callback' - это лишь произвольное название функции (хотя тут больше похоже на переменную со значением, чем на функцию. Но так как callback принимает значение от функции - это функция), в которую мы далее будем передавать полноценную функцию со значениями displayer. 

Создаем переменную result которая выполняет сложение двух неизвестных переменных 'a' и 'b' (пока их значение undefined)

Назначаем что функция callback будет иметь и выводить параметр result который хранит результат сложения.

Далее создаем функцию с наименованием displayer.
(которая в дальнейшем будет назначена передавать свое значение в callback. По сути можно сказать что callback = displayer)

Функция displayer имеет параметр res.
Далее тело функции displayer будет выводить в консоле строку 'Результат:' и переменную res (которую перенимает значения из result)

Далее самое важное. Мы передаем (назначаем) наши параметры функции sum 
Теперь (a, b, callback) = (3, 10, displayer)
a = 3
b = 10
callback = функция displayer

Грубо говоря, общая картина такова, что сумма значений 
(a + b) = result
result = callback 
callback = displayer
А так как displayer передает значения в callback, а callback хранит в себе значение переменной result, то есть сумму (a + b), то для функции displayer нам необходимо сохранить это значение в переменную res.

3 + 10 = 13. Помещается в функцию (параметр) callback и храниться в переменной result в качестве параметра.
А наш параметр callback является функцией displayer которая так же хранит в себе аналогичную переменню res в качестве параметра.

Получается displayer это отражение callback, которая хранит в себе все ее значения с небольшими дополненеиями. Которая могла бы вызываться по необходимости (в конце), то есть отдельно от выполнения главноего тела функции sum, где участвует callback.

*/

// Или это же, но через анонимную функцию (без названия)

function sum04(a, b, anonFunction) {
   const result = a + b;
   anonFunction(result);
}

sum04(5, 10, function(res01) {
   console.log('Результат:', res01);
});

// callback с уже существующими функциями 

function sum05(a, b, alert) {
   const result = a + b;
   alert('Результат: ' + result);
}

sum05(5, 11, alert)

//// Return - позволяет вернуть результат(значение) из функции 
// return - останавливает выполнение функции
console.log('////Return////');

// Хотим вывести значение a + b
function sum_(a, b) {
   console.log('a + b =', a + b); // значение в консоли = 3 (но не в переменной)
}
sum_(1, 2)

// Но хотим вывести не в консоль, а в переменную 
function sum(a, b) {
   return a + b; // - указываем значение которое хотим вернуть
}
// Для того чтобы сохранить возвращенные данные return, создадим переменную
const result = sum(10, 20)

console.log('result:', result); // 30


